# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.1
#
# <auto-generated>
#
# Generated from file `bank.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Client
_M_Client = Ice.openModule('Client')
__name__ = 'Client'

if 'CurrencyType' not in _M_Client.__dict__:
    _M_Client.CurrencyType = Ice.createTempClass()
    class CurrencyType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    CurrencyType.PLN = CurrencyType("PLN", 0)
    CurrencyType.EUR = CurrencyType("EUR", 1)
    CurrencyType.USD = CurrencyType("USD", 2)
    CurrencyType.HRK = CurrencyType("HRK", 3)
    CurrencyType.HUF = CurrencyType("HUF", 4)
    CurrencyType._enumerators = { 0:CurrencyType.PLN, 1:CurrencyType.EUR, 2:CurrencyType.USD, 3:CurrencyType.HRK, 4:CurrencyType.HUF }

    _M_Client._t_CurrencyType = IcePy.defineEnum('::Client::CurrencyType', CurrencyType, (), CurrencyType._enumerators)

    _M_Client.CurrencyType = CurrencyType
    del CurrencyType

if 'TypeOfAccount' not in _M_Client.__dict__:
    _M_Client.TypeOfAccount = Ice.createTempClass()
    class TypeOfAccount(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    TypeOfAccount.PREMIUM = TypeOfAccount("PREMIUM", 0)
    TypeOfAccount.STANDARD = TypeOfAccount("STANDARD", 1)
    TypeOfAccount._enumerators = { 0:TypeOfAccount.PREMIUM, 1:TypeOfAccount.STANDARD }

    _M_Client._t_TypeOfAccount = IcePy.defineEnum('::Client::TypeOfAccount', TypeOfAccount, (), TypeOfAccount._enumerators)

    _M_Client.TypeOfAccount = TypeOfAccount
    del TypeOfAccount

if 'CreditInfo' not in _M_Client.__dict__:
    _M_Client.CreditInfo = Ice.createTempClass()
    class CreditInfo(Ice.Value):
        def __init__(self, currency=_M_Client.CurrencyType.PLN, ratePerMonth=0.0):
            self.currency = currency
            self.ratePerMonth = ratePerMonth

        def ice_id(self):
            return '::Client::CreditInfo'

        @staticmethod
        def ice_staticId():
            return '::Client::CreditInfo'

        def __str__(self):
            return IcePy.stringify(self, _M_Client._t_CreditInfo)

        __repr__ = __str__

    _M_Client._t_CreditInfo = IcePy.defineValue('::Client::CreditInfo', CreditInfo, -1, (), False, False, None, (
        ('currency', (), _M_Client._t_CurrencyType, False, 0),
        ('ratePerMonth', (), IcePy._t_float, False, 0)
    ))
    CreditInfo._ice_type = _M_Client._t_CreditInfo

    _M_Client.CreditInfo = CreditInfo
    del CreditInfo

if 'CreditDateRange' not in _M_Client.__dict__:
    _M_Client.CreditDateRange = Ice.createTempClass()
    class CreditDateRange(Ice.Value):
        def __init__(self, month=0, year=0):
            self.month = month
            self.year = year

        def ice_id(self):
            return '::Client::CreditDateRange'

        @staticmethod
        def ice_staticId():
            return '::Client::CreditDateRange'

        def __str__(self):
            return IcePy.stringify(self, _M_Client._t_CreditDateRange)

        __repr__ = __str__

    _M_Client._t_CreditDateRange = IcePy.defineValue('::Client::CreditDateRange', CreditDateRange, -1, (), False, False, None, (
        ('month', (), IcePy._t_short, False, 0),
        ('year', (), IcePy._t_short, False, 0)
    ))
    CreditDateRange._ice_type = _M_Client._t_CreditDateRange

    _M_Client.CreditDateRange = CreditDateRange
    del CreditDateRange

_M_Client._t_StandardAccount = IcePy.defineValue('::Client::StandardAccount', Ice.Value, -1, (), False, True, None, ())

if 'StandardAccountPrx' not in _M_Client.__dict__:
    _M_Client.StandardAccountPrx = Ice.createTempClass()
    class StandardAccountPrx(Ice.ObjectPrx):

        def getAccountState(self, context=None):
            return _M_Client.StandardAccount._op_getAccountState.invoke(self, ((), context))

        def getAccountStateAsync(self, context=None):
            return _M_Client.StandardAccount._op_getAccountState.invokeAsync(self, ((), context))

        def begin_getAccountState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Client.StandardAccount._op_getAccountState.begin(self, ((), _response, _ex, _sent, context))

        def end_getAccountState(self, _r):
            return _M_Client.StandardAccount._op_getAccountState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Client.StandardAccountPrx.ice_checkedCast(proxy, '::Client::StandardAccount', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Client.StandardAccountPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Client::StandardAccount'
    _M_Client._t_StandardAccountPrx = IcePy.defineProxy('::Client::StandardAccount', StandardAccountPrx)

    _M_Client.StandardAccountPrx = StandardAccountPrx
    del StandardAccountPrx

    _M_Client.StandardAccount = Ice.createTempClass()
    class StandardAccount(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Client::StandardAccount', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Client::StandardAccount'

        @staticmethod
        def ice_staticId():
            return '::Client::StandardAccount'

        def getAccountState(self, current=None):
            raise NotImplementedError("servant method 'getAccountState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Client._t_StandardAccountDisp)

        __repr__ = __str__

    _M_Client._t_StandardAccountDisp = IcePy.defineClass('::Client::StandardAccount', StandardAccount, (), None, ())
    StandardAccount._ice_type = _M_Client._t_StandardAccountDisp

    StandardAccount._op_getAccountState = IcePy.Operation('getAccountState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_Client.StandardAccount = StandardAccount
    del StandardAccount

_M_Client._t_AccountFactory = IcePy.defineValue('::Client::AccountFactory', Ice.Value, -1, (), False, True, None, ())

if 'AccountFactoryPrx' not in _M_Client.__dict__:
    _M_Client.AccountFactoryPrx = Ice.createTempClass()
    class AccountFactoryPrx(Ice.ObjectPrx):

        def getAccount(self, pesel, firstName, lastName, income, context=None):
            return _M_Client.AccountFactory._op_getAccount.invoke(self, ((pesel, firstName, lastName, income), context))

        def getAccountAsync(self, pesel, firstName, lastName, income, context=None):
            return _M_Client.AccountFactory._op_getAccount.invokeAsync(self, ((pesel, firstName, lastName, income), context))

        def begin_getAccount(self, pesel, firstName, lastName, income, _response=None, _ex=None, _sent=None, context=None):
            return _M_Client.AccountFactory._op_getAccount.begin(self, ((pesel, firstName, lastName, income), _response, _ex, _sent, context))

        def end_getAccount(self, _r):
            return _M_Client.AccountFactory._op_getAccount.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Client.AccountFactoryPrx.ice_checkedCast(proxy, '::Client::AccountFactory', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Client.AccountFactoryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Client::AccountFactory'
    _M_Client._t_AccountFactoryPrx = IcePy.defineProxy('::Client::AccountFactory', AccountFactoryPrx)

    _M_Client.AccountFactoryPrx = AccountFactoryPrx
    del AccountFactoryPrx

    _M_Client.AccountFactory = Ice.createTempClass()
    class AccountFactory(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Client::AccountFactory', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Client::AccountFactory'

        @staticmethod
        def ice_staticId():
            return '::Client::AccountFactory'

        def getAccount(self, pesel, firstName, lastName, income, current=None):
            raise NotImplementedError("servant method 'getAccount' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Client._t_AccountFactoryDisp)

        __repr__ = __str__

    _M_Client._t_AccountFactoryDisp = IcePy.defineClass('::Client::AccountFactory', AccountFactory, (), None, ())
    AccountFactory._ice_type = _M_Client._t_AccountFactoryDisp

    AccountFactory._op_getAccount = IcePy.Operation('getAccount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_float, False, 0)), (), ((), _M_Client._t_StandardAccountPrx, False, 0), ())

    _M_Client.AccountFactory = AccountFactory
    del AccountFactory

_M_Client._t_PremiumAccount = IcePy.defineValue('::Client::PremiumAccount', Ice.Value, -1, (), False, True, None, ())

if 'PremiumAccountPrx' not in _M_Client.__dict__:
    _M_Client.PremiumAccountPrx = Ice.createTempClass()
    class PremiumAccountPrx(_M_Client.StandardAccountPrx):

        def getCredit(self, desiredCurrency, desiredAmount, creditDateRange, context=None):
            return _M_Client.PremiumAccount._op_getCredit.invoke(self, ((desiredCurrency, desiredAmount, creditDateRange), context))

        def getCreditAsync(self, desiredCurrency, desiredAmount, creditDateRange, context=None):
            return _M_Client.PremiumAccount._op_getCredit.invokeAsync(self, ((desiredCurrency, desiredAmount, creditDateRange), context))

        def begin_getCredit(self, desiredCurrency, desiredAmount, creditDateRange, _response=None, _ex=None, _sent=None, context=None):
            return _M_Client.PremiumAccount._op_getCredit.begin(self, ((desiredCurrency, desiredAmount, creditDateRange), _response, _ex, _sent, context))

        def end_getCredit(self, _r):
            return _M_Client.PremiumAccount._op_getCredit.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Client.PremiumAccountPrx.ice_checkedCast(proxy, '::Client::PremiumAccount', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Client.PremiumAccountPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Client::PremiumAccount'
    _M_Client._t_PremiumAccountPrx = IcePy.defineProxy('::Client::PremiumAccount', PremiumAccountPrx)

    _M_Client.PremiumAccountPrx = PremiumAccountPrx
    del PremiumAccountPrx

    _M_Client.PremiumAccount = Ice.createTempClass()
    class PremiumAccount(_M_Client.StandardAccount):

        def ice_ids(self, current=None):
            return ('::Client::PremiumAccount', '::Client::StandardAccount', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Client::PremiumAccount'

        @staticmethod
        def ice_staticId():
            return '::Client::PremiumAccount'

        def getCredit(self, desiredCurrency, desiredAmount, creditDateRange, current=None):
            raise NotImplementedError("servant method 'getCredit' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Client._t_PremiumAccountDisp)

        __repr__ = __str__

    _M_Client._t_PremiumAccountDisp = IcePy.defineClass('::Client::PremiumAccount', PremiumAccount, (), None, (_M_Client._t_StandardAccountDisp,))
    PremiumAccount._ice_type = _M_Client._t_PremiumAccountDisp

    PremiumAccount._op_getCredit = IcePy.Operation('getCredit', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Client._t_CurrencyType, False, 0), ((), IcePy._t_float, False, 0), ((), _M_Client._t_CreditDateRange, False, 0)), (), ((), _M_Client._t_CreditInfo, False, 0), ())

    _M_Client.PremiumAccount = PremiumAccount
    del PremiumAccount

# End of module Client
